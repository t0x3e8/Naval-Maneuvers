// import PortBoard from '../client/GameEngine/portBoard.js'
// import Board from '../client/GameEngine/board.js'
// import { CellType, PawnType } from '../client/GameEngine/gameEnums'
// import settings from '../client/GameEngine/settings.js'
// import Pawn from '../client/GameEngine/pawn.js'
// import _ from 'underscore'

// describe('PortBoard Class Functionality Tests', () => {
//   let board
//   let portCells
//   const pawnsInRow17 = []

//   beforeEach(() => {
//     board = new PortBoard()
//     portCells = _.flatten(board.cells)

//     let pawn
//     for (let c = 0; c < 5; c++) {
//       pawn = new Pawn(PawnType.BATTLESHIP)
//       pawn.update({ col: c, row: 17, type: PawnType.BATTLESHIP })
//       pawnsInRow17.push(pawn)
//     }
//   })

//   it('should display only 6 rows when a PortBoard is created', () => {
//     expect(board.portCells.length).toBe(6)
//   })

//   describe('initializePortWithPawns Function Tests', () => {
//     it('should return Error when pawns is null', () => {
//       expect(() => board.initializePortWithPawns(null)).toThrow(Error)
//     })

//     it('should return Error when pawns is undefined', () => {
//       expect(() => board.initializePortWithPawns(undefined)).toThrow(Error)
//     })

//     it('should return Error when pawns is not array of Pawn', () => {
//       expect(() => board.initializePortWithPawns([1, 2, 3, 4])).toThrow(Error)
//     })

//     it('should pass when pawns is array of Pawn', () => {
//       board = new Board()

//       expect(() => board.setPawns(pawnsInRow17)).not.toThrow(Error)
//     })

//     it('should update Cells in row 17 with 5 Pawns', () => {
//       board.initializePortWithPawns(pawnsInRow17)
//       let cell
//       pawnsInRow17.forEach(pawnInRow17 => {
//         cell = board.cells[pawnInRow17.col][pawnInRow17.row]
//         expect(cell.pawn).not.toBeNull()
//         expect(cell.pawn).toHaveProperty('type', 4)
//       })
//     })
//   })

//   it('should limit Board to only Port view with random assignment of all pawns except Batteries and Mines', () => {
//     const portBatteryCells = _.filter(portCells, (cell) => cell.type === CellType.PLAYER_TWO_BATTERY)
//     const nonBatteryPortCells = _.filter(portCells, (cell) => cell.type !== CellType.PLAYER_TWO_BATTERY)
//     const pawnTypeCounts = _.countBy(nonBatteryPortCells, (cell) => cell.pawn?.type)

//     expect(portBatteryCells.length).toBe(4)
//     portBatteryCells.forEach((cell) => {
//       expect(cell).toHaveProperty('type', CellType.PLAYER_TWO_BATTERY)
//       expect(cell.pawn).not.toBeNull()
//     })

//     _.each(PawnType, (pawnType) => {
//       const expectedCount = (pawnType === PawnType.BATTERY || pawnType === PawnType.MINE) ? 0 : _.find(settings.pawns, (p) => p.typeId === pawnType).fleetSize
//       expect(pawnTypeCounts[pawnType] || 0).toBe(expectedCount)
//     })
//   })
// })
